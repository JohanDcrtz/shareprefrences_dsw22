import 'package:flutter/material.dart';
import 'package:expansion_tile_card/expansion_tile_card.dart';
import 'package:shareprefrences_dsw22/screens/perfil_screen.dart';
import 'package:shareprefrences_dsw22/screens/servicios_screen.dart';

class Repuesto {
  final String nombre;
  final String tipo;
  final String descripcion;
  final double precio;
  final String marca;
  final String modelo;
  final int ano;

  Repuesto({
    required this.nombre,
    required this.tipo,
    required this.descripcion,
    required this.precio,
    required this.marca,
    required this.modelo,
    required this.ano,
  });
}

class HomeScreen extends StatefulWidget {
  const HomeScreen({Key? key}) : super(key: key);

  @override
  _HomeScreenState createState() => _HomeScreenState();
}

class _HomeScreenState extends State<HomeScreen> {
  int _selectedIndex = 0;
  String selectedTipo = 'Eléctrico';
  String selectedMarca = 'Todos';
  String selectedModelo = 'Todos';
  String selectedAno = 'Todos';
  String searchText = '';

  List<String> tiposDeRepuestos = ['Eléctrico', 'Motor', 'Frenos', 'Suspensión', 'Transmisión'];
  List<String> marcasDeVehiculos = ['Todos', 'Toyota', 'Honda', 'Ford', 'Chevrolet', 'Mitsubishi', 'Jeep'];
  List<String> modelosDeVehiculos = ['Todos', 'Camry', 'Civic', 'F-150', 'Malibu', 'S200', 'Prelude', 'Compass', 'Patriot', 'Outlander', 'Lancer'];
  List<String> anosDeVehiculos = ['Todos', '2023', '2022', '2021', '2020', '2019'];

  List<Repuesto> repuestos = [
    Repuesto(
      nombre: 'Batería de Coche',
      tipo: 'Eléctrico',
      descripcion: 'Batería de coche de alta capacidad',
      precio: 99.99,
      marca: 'Todos',
      modelo: 'Todos',
      ano: 0,
    ),
    Repuesto(
      nombre: 'Alternador',
      tipo: 'Eléctrico',
      descripcion: 'Generador de corriente para el sistema eléctrico del coche',
      precio: 129.99,
      marca: 'Toyota',
      modelo: 'Camry',
      ano: 2022,
    ),
    Repuesto(
      nombre: 'Motor de Arranque',
      tipo: 'Motor',
      descripcion: 'Motor de arranque para vehículos',
      precio: 79.99,
      marca: 'Ford',
      modelo: 'F-150',
      ano: 2020,
    ),
    Repuesto(
      nombre: 'Pastillas de Freno',
      tipo: 'Frenos',
      descripcion: 'Juego de pastillas de freno de alto rendimiento',
      precio: 49.99,
      marca: 'Chevrolet',
      modelo: 'Malibu',
      ano: 2021,
    ),
    Repuesto(
      nombre: 'Amortiguadores Delanteros',
      tipo: 'Suspensión',
      descripcion: 'Amortiguadores delanteros para una conducción suave',
      precio: 89.99,
      marca: 'Honda',
      modelo: 'Civic',
      ano: 2019,
    ),
    Repuesto(
      nombre: 'Embrague de Repuesto',
      tipo: 'Transmisión',
      descripcion: 'Embrague de repuesto para vehículos manuales',
      precio: 119.99,
      marca: 'Toyota',
      modelo: 'Camry',
      ano: 2022,
    ),
    Repuesto(
      nombre: 'Filtro de Aire',
      tipo: 'Motor',
      descripcion: 'Filtro de aire de alto rendimiento',
      precio: 19.99,
      marca: 'Ford',
      modelo: 'Focus',
      ano: 2021,
    ),
    Repuesto(
      nombre: 'Aceite de Motor',
      tipo: 'Motor',
      descripcion: 'Aceite de motor sintético para un rendimiento óptimo',
      precio: 29.99,
      marca: 'Chevrolet',
      modelo: 'Equinox',
      ano: 2020,
    ),
    Repuesto(
      nombre: 'Pastillas de Embrague',
      tipo: 'Transmisión',
      descripcion: 'Pastillas de embrague de repuesto',
      precio: 59.99,
      marca: 'Honda',
      modelo: 'Accord',
      ano: 2022,
    ),
    Repuesto(
      nombre: 'Pastillas de Embrague',
      tipo: 'Transmisión',
      descripcion: 'Pastillas de embrague de repuesto',
      precio: 59.99,
      marca: 'Honda',
      modelo: 'Accord',
      ano: 2022,
    ),
    Repuesto(
      nombre: 'Coilovers',
      tipo: 'Suspensión',
      descripcion: 'Coilovers ajustables',
      precio: 79.99,
      marca: 'Honda',
      modelo: 'S200',
      ano: 2005,
    ),
    Repuesto(
      nombre: 'Pastillas de Embrague',
      tipo: 'Transmisión',
      descripcion: 'Pastillas de embrague de repuesto',
      precio: 59.99,
      marca: 'Mitsubishi',
      modelo: 'Lancer',
      ano: 2019,
    ),
    Repuesto(
      nombre: 'Aceite de Motor',
      tipo: 'Motor',
      descripcion: 'Pastillas de embrague de repuesto',
      precio: 59.99,
      marca: 'Mitsubishi',
      modelo: 'Outlander',
      ano: 2022,
    ),
    // ... (otros repuestos)
  ];

  List<Repuesto> repuestosFiltrados = [];

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Inventario de Repuestos'),
        actions: [
          IconButton(
            icon: Icon(Icons.refresh),
            onPressed: actualizarDatos,
          ),
        ],
      ),
      body: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.stretch,
          children: [
            Text(
              '¡Bienvenido a GIGATALLER, Zacatecoluca!',
              textAlign: TextAlign.center,
              style: TextStyle(
                fontSize: 20.0,
                fontWeight: FontWeight.bold,
                fontStyle: FontStyle.italic,
              ),
            ),
            SizedBox(height: 16.0),
            _buildSearchField(),
            SizedBox(height: 16.0),
            _buildFilters(),
            SizedBox(height: 16.0),
            _buildSearchButton(),
            SizedBox(height: 16.0),
            _buildRepuestosList(),
          ],
        ),
      ),
      bottomNavigationBar: BottomNavigationBar(
        items: const <BottomNavigationBarItem>[
          BottomNavigationBarItem(
            icon: Icon(Icons.build),
            label: 'Repuestos',
          ),
          BottomNavigationBarItem(
            icon: Icon(Icons.assignment),
            label: 'Servicios',
          ),
          BottomNavigationBarItem(
            icon: Icon(Icons.person),
            label: 'Perfil',
          ),
        ],
        currentIndex: _selectedIndex,
        selectedItemColor: Colors.blue,
        onTap: _onNavigationItemSelected,
      ),
    );
  }

  Widget _buildSearchField() {
    return TextField(
      onChanged: (value) {
        setState(() {
          searchText = value;
        });
      },
      decoration: InputDecoration(
        labelText: 'Buscar repuestos',
        border: OutlineInputBorder(),
        prefixIcon: Icon(Icons.search),
      ),
    );
  }

  Widget _buildFilters() {
    return Card(
      elevation: 3.0,
      child: ExpansionTileCard(
        title: Text(
          'Filtros',
          style: TextStyle(
            fontWeight: FontWeight.bold,
            fontSize: 18.0,
          ),
        ),
        children: <Widget>[
          _buildDropdown('Tipo de Repuesto:', selectedTipo, tiposDeRepuestos, (value) {
            setState(() {
              selectedTipo = value;
            });
          }),
          _buildDropdown('Marca:', selectedMarca, marcasDeVehiculos, (value) {
            setState(() {
              selectedMarca = value;
            });
          }),
          _buildDropdown('Modelo:', selectedModelo, modelosDeVehiculos, (value) {
            setState(() {
              selectedModelo = value;
            });
          }),
          _buildDropdown('Año:', selectedAno, anosDeVehiculos, (value) {
            setState(() {
              selectedAno = value;
            });
          }),
        ],
      ),
    );
  }

  Widget _buildDropdown(String label, String selectedValue, List<String> options, void Function(String) onChanged) {
    return Padding(
      padding: const EdgeInsets.symmetric(horizontal: 16.0, vertical: 8.0),
      child: Row(
        mainAxisAlignment: MainAxisAlignment.spaceBetween,
        children: [
          Text(
            '$label ',
            style: TextStyle(
              fontWeight: FontWeight.bold,
            ),
          ),
          DropdownButton<String>(
            value: selectedValue,
            onChanged: (String? newValue) {
              if (newValue != null) {
                onChanged(newValue);
              }
            },
            items: options
                .map<DropdownMenuItem<String>>((String value) {
                  return DropdownMenuItem<String>(
                    value: value,
                    child: Text(value),
                  );
                })
                .toList(),
          ),
        ],
      ),
    );
  }

  Widget _buildSearchButton() {
    return ElevatedButton(
      onPressed: () {
        _applyFiltersAndSearch();
      },
      child: Text('Buscar'),
    );
  }

  Widget _buildRepuestosList() {
    return Expanded(
      child: ListView.builder(
        itemCount: repuestosFiltrados.length,
        itemBuilder: (context, index) {
          return _buildRepuestoItem(repuestosFiltrados[index]);
        },
      ),
    );
  }

  Widget _buildRepuestoItem(Repuesto repuesto) {
    return Card(
      elevation: 3.0,
      margin: EdgeInsets.symmetric(vertical: 8.0),
      child: ListTile(
        title: Text(repuesto.nombre),
        subtitle: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Text('Tipo: ${repuesto.tipo}'),
            Text('Descripción: ${repuesto.descripcion}'),
            Text('Precio: \$${repuesto.precio.toStringAsFixed(2)}'),
            Text('Marca: ${repuesto.marca}'),
            Text('Modelo: ${repuesto.modelo}'),
            Text('Año: ${repuesto.ano}'),
          ],
        ),
        onTap: () {
          // Lógica para manejar el tap en un repuesto
        },
      ),
    );
  }

  void _onNavigationItemSelected(int index) {
    setState(() {
      _selectedIndex = index;
    });

    switch (index) {
      case 0:
        // Repuestos - No hay navegación adicional
        break;
      case 1:
        // Servicios
        Navigator.push(
          context,
          MaterialPageRoute(builder: (context) => ServiciosScreen()),
        );
        break;
      case 2:
        // Perfil
        Navigator.push(
          context,
          MaterialPageRoute(builder: (context) => PerfilScreen()),
        );
        break;
    }
  }

  void actualizarDatos() {
    // Lógica de actualización de datos...
    print('Datos actualizados');
  }

  void _applyFiltersAndSearch() {
    setState(() {
      repuestosFiltrados = repuestos.where((repuesto) {
        // Lógica de filtrado y búsqueda...
        if (selectedTipo != 'Todos' && repuesto.tipo != selectedTipo) {
          return false;
        }

        if (selectedMarca != 'Todos' && repuesto.marca != selectedMarca) {
          return false;
        }

        if (selectedModelo != 'Todos' && repuesto.modelo != selectedModelo) {
          return false;
        }

        if (selectedAno != 'Todos' && repuesto.ano != int.parse(selectedAno)) {
          return false;
        }

        if (searchText.isNotEmpty &&
            !repuesto.nombre.toLowerCase().contains(searchText.toLowerCase())) {
          return false;
        }

        return true;
      }).toList();
    });
  }
}



